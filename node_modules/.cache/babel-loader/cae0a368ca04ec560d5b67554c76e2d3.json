{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// the button to connect to an ethereum wallet\nvar buttonEthConnect = document.querySelector('button.eth_connect'); // the read-only eth fields, we process them automatically\n\nvar formInputEthMessage = document.querySelector('input.eth_message');\nvar formInputEthAddress = document.querySelector('input.eth_address');\nvar formInputEthSignature = document.querySelector('input.eth_signature');\nformInputEthMessage.hidden = true;\nformInputEthAddress.hidden = true;\nformInputEthSignature.hidden = true; // get the new session form for submission later\n\nvar formNewSession = document.querySelector('form.new_session'); // only proceed with ethereum context available\n\nif (typeof window.ethereum !== 'undefined') {\n  buttonEthConnect.addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var accounts, etherbase, nonce, customTitle, requestTime, message, signature;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            buttonEthConnect.disabled = true; // request accounts from ethereum provider\n\n            _context.next = 3;\n            return requestAccounts();\n\n          case 3:\n            accounts = _context.sent;\n            etherbase = accounts[0]; // sign a message with current time and nonce from database\n\n            _context.next = 7;\n            return getUuidByAccount(etherbase);\n\n          case 7:\n            nonce = _context.sent;\n\n            if (!nonce) {\n              _context.next = 21;\n              break;\n            }\n\n            customTitle = \"Ethereum on Rails\";\n            requestTime = new Date().getTime();\n            message = customTitle + \",\" + requestTime + \",\" + nonce;\n            _context.next = 14;\n            return personalSign(etherbase, message);\n\n          case 14:\n            signature = _context.sent;\n            // populate and submit form\n            formInputEthMessage.value = message;\n            formInputEthAddress.value = etherbase;\n            formInputEthSignature.value = signature;\n            formNewSession.submit();\n            _context.next = 22;\n            break;\n\n          case 21:\n            // should have some error handling here\n            formInputEthMessage.value = \"Please sign up first!\";\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n} else {\n  // disable form submission in case there is no ethereum wallet available\n  buttonEthConnect.innerHTML = \"No Ethereum Context Available\";\n  buttonEthConnect.disabled = true;\n} // request ethereum wallet access and approved accounts[]\n\n\nfunction requestAccounts() {\n  return _requestAccounts.apply(this, arguments);\n} // request ethereum signature for message from account\n\n\nfunction _requestAccounts() {\n  _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var accounts;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n\n          case 2:\n            accounts = _context2.sent;\n            return _context2.abrupt(\"return\", accounts);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _requestAccounts.apply(this, arguments);\n}\n\nfunction personalSign(_x, _x2) {\n  return _personalSign.apply(this, arguments);\n} // get nonce from /api/v1/users/ by account\n\n\nfunction _personalSign() {\n  _personalSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(account, message) {\n    var signature;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return ethereum.request({\n              method: 'personal_sign',\n              params: [message, account]\n            });\n\n          case 2:\n            signature = _context3.sent;\n            return _context3.abrupt(\"return\", signature);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _personalSign.apply(this, arguments);\n}\n\nfunction getUuidByAccount(_x3) {\n  return _getUuidByAccount.apply(this, arguments);\n}\n\nfunction _getUuidByAccount() {\n  _getUuidByAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(account) {\n    var response, nonceJson, uuid;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetch(\"/api/v1/users/\" + account);\n\n          case 2:\n            response = _context4.sent;\n            _context4.next = 5;\n            return response.json();\n\n          case 5:\n            nonceJson = _context4.sent;\n\n            if (nonceJson) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 8:\n            uuid = nonceJson[0].eth_nonce;\n            return _context4.abrupt(\"return\", uuid);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getUuidByAccount.apply(this, arguments);\n}","map":{"version":3,"names":["buttonEthConnect","document","querySelector","formInputEthMessage","formInputEthAddress","formInputEthSignature","hidden","formNewSession","window","ethereum","addEventListener","disabled","requestAccounts","accounts","etherbase","getUuidByAccount","nonce","customTitle","requestTime","Date","getTime","message","personalSign","signature","value","submit","innerHTML","request","method","account","params","fetch","response","json","nonceJson","uuid","eth_nonce"],"sources":["/home/jin/dev/BrokenFlowersApp/app/javascript/packs/sessions_new.js"],"sourcesContent":["// the button to connect to an ethereum wallet\nconst buttonEthConnect = document.querySelector('button.eth_connect');\n\n// the read-only eth fields, we process them automatically\nconst formInputEthMessage = document.querySelector('input.eth_message');\nconst formInputEthAddress = document.querySelector('input.eth_address');\nconst formInputEthSignature = document.querySelector('input.eth_signature');\nformInputEthMessage.hidden = true;\nformInputEthAddress.hidden = true;\nformInputEthSignature.hidden = true;\n\n// get the new session form for submission later\nconst formNewSession = document.querySelector('form.new_session');\n\n// only proceed with ethereum context available\nif (typeof window.ethereum !== 'undefined') {\n  buttonEthConnect.addEventListener('click', async () => {\n    buttonEthConnect.disabled = true;\n\n    // request accounts from ethereum provider\n    const accounts = await requestAccounts();\n    const etherbase = accounts[0];\n\n    // sign a message with current time and nonce from database\n    const nonce = await getUuidByAccount(etherbase);\n    if (nonce) {\n      const customTitle = \"Ethereum on Rails\";\n      const requestTime = new Date().getTime();\n      const message = customTitle + \",\" + requestTime + \",\" + nonce;\n      const signature = await personalSign(etherbase, message);\n\n      // populate and submit form\n      formInputEthMessage.value = message;\n      formInputEthAddress.value = etherbase;\n      formInputEthSignature.value = signature;\n      formNewSession.submit();\n    } else {\n\n      // should have some error handling here\n      formInputEthMessage.value = \"Please sign up first!\";\n    }\n  });\n} else {\n  // disable form submission in case there is no ethereum wallet available\n  buttonEthConnect.innerHTML = \"No Ethereum Context Available\";\n  buttonEthConnect.disabled = true;\n}\n\n// request ethereum wallet access and approved accounts[]\nasync function requestAccounts() {\n  const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n  return accounts;\n}\n\n// request ethereum signature for message from account\nasync function personalSign(account, message) {\n  const signature = await ethereum.request({ method: 'personal_sign', params: [ message, account ] });\n  return signature;\n}\n\n// get nonce from /api/v1/users/ by account\nasync function getUuidByAccount(account) {\n  const response = await fetch(\"/api/v1/users/\" + account);\n  const nonceJson = await response.json();\n  if (!nonceJson) return null;\n  const uuid = nonceJson[0].eth_nonce;\n  return uuid;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}